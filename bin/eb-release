#!/bin/bash

usage () {
    echo "Usage: $(basename "$0") <APP> <APP_DOCKER_TAG> <APP_ENV> <REGION>"
    echo
    echo "Create an application version for the named application using a"
    echo "specified Docker image tag."
    echo
    echo "Returns the app version created in Elastic Beanstalk."
    echo
    echo "  APP              the name of the application, e.g. 'bouncer'"
    echo "  APP_DOCKER_TAG   the tag of the Docker image to release"
    echo "  APP_ENV          the ENV or stage, usuall prod or qa"
    echo "  REGION           the target AWS region"
}

abort () {
    echo "Error:" "$@" >&2
    echo "Aborting!" >&2
    exit 1
}

status () {
    echo "--->" "$@" >&2
}

if [ "$#" -ne 4 ]; then
    usage >&2
    exit 1
fi

set -eu

PATH="$(dirname "$0"):${PATH}"

APP=$1
APP_DOCKER_TAG=$2
APP_ENV=$3
REGION=$4

if [ ! -f "${APP}/Dockerrun.aws.json" ]; then
    abort "there must be a Dockerrun.aws.json in the app directory (${APP}/)"
fi

# Deploying an application to Elastic Beanstalk has several steps:
#
# 1. Upload a tweaked version of the application's Dockerrun.aws.json template
#    to the ElasticBeanstalk S3 bucket.
# 2. Create an application version using the uploaded template. This creates the
#    application automatically if it needs to.
# 3. Create or update the named environment with the uploaded version of the
#    application.
#
# This script does steps 1 and 2. The `eb-deploy` script is responsible for step
# 3.


status "preparing application source bundle"

SRCBUNDLEDIR=$(mktemp -d)

# Use JQ to append ":<APP_DOCKER_TAG>" to the image name in the template JSON
# file.
jq ".Image.Name += \":${APP_DOCKER_TAG}\"" <"${APP}/Dockerrun.aws.json" >"$SRCBUNDLEDIR/Dockerrun.aws.json"

# Copy additional configuration
EBEXTENSIONS="${SRCBUNDLEDIR}/.ebextensions/"
if [ -d "common/ebextensions" ]; then
  mkdir -p "$EBEXTENSIONS"
  cp common/ebextensions/*.config "$EBEXTENSIONS"
fi
# Allow application to override common ebextensions
if [ -d "${APP}/ebextensions/${APP_ENV}" ]; then
  mkdir -p "$EBEXTENSIONS"
  cp ${APP}/ebextensions/${APP_ENV}/*.config "$EBEXTENSIONS"
fi

# Conditionally create platform extension hierarchy. Used to provide
# custom platform configuration on a per app or global basis.
PLATFORMEXTENSIONS="${SRCBUNDLEDIR}/.platform"
if [ -d "common/platform" ]; then
  mkdir -p "$PLATFORMEXTENSIONS"
  cp -r common/platform/* "$PLATFORMEXTENSIONS"
fi
if [ -d "${APP}/platform/${APP_ENV}" ]; then
  mkdir -p "$PLATFORMEXTENSIONS"
  cp -r ${APP}/platform/${APP_ENV}/* "$PLATFORMEXTENSIONS"
fi

# And clean up when we're done...
trap 'rm -r "$SRCBUNDLEDIR"' EXIT


status "fetching storage location"

EB_BUCKET=$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text --region "$REGION")


status "uploading application version to S3"

VERSION_LABEL="${APP}-${APP_ENV}$(date -u +"%Y%m%dT%H%M%SZ")-${APP_DOCKER_TAG}"
SRCBUNDLE="${SRCBUNDLEDIR}/bundle.zip"

pushd "$SRCBUNDLEDIR" > /dev/null
zip -qr "$SRCBUNDLE" .
popd > /dev/null

aws s3 cp --quiet "$SRCBUNDLE" "s3://${EB_BUCKET}/${APP}/${VERSION_LABEL}.zip"


status "creating application version in EB"

aws elasticbeanstalk create-application-version \
    --application-name "$APP" \
    --version-label "$VERSION_LABEL" \
    --source-bundle "S3Bucket=${EB_BUCKET},S3Key=${APP}/${VERSION_LABEL}.zip" \
    --process \
    --auto-create-application \
    --query 'ApplicationVersion.VersionLabel' \
    --output text \
    --region "$REGION"

status "waiting for application version to be processed"

while true; do
  STATUS=$(aws elasticbeanstalk describe-application-versions \
               --application-name "$APP" \
               --version-label "$VERSION_LABEL" \
               --query 'ApplicationVersions[0].Status' \
               --output text \
               --region "$REGION")
  if [ "$STATUS" = "PROCESSING" ]; then sleep 2; continue; fi
  if [ "$STATUS" = "FAILED" ]; then
    status "application version processing failed"
    exit 1
  fi

  break
done

status "application version ready"
